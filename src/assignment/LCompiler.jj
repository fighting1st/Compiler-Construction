/*
* Emmet Delaney
* 10314721
*/

PARSER_BEGIN(LCompiler)

public class LCompiler
{
    public static void main(String [] args)
    {
        try {
            LCompiler tokeniser;
            if(args.length == 0) {
                System.out.println("Reading from standard input . . .");
                tokeniser = new LCompiler(System.in);
            } else if(args.length == 1) {
                try {
                    tokeniser = new LCompiler(new java.io.FileInputStream(args[0]));
                } catch(java.io.FileNotFoundException e) {
                    System.out.println("File " + args[0] + " not found.");
                    return;
                }
            }

            for(Token token = getNextToken(); token.kind != EOF; token = getNextToken()) {
                switch(token.kind) {
                    case KEYWORD:       System.out.print("KEYWORD" + "(" + token.image + ")"); break;
                    case IDENITFIER:    System.out.print("IDENITFIER" + "(" + token.image + ")"); break;
                    case STRING:        System.out.print("STRING" + "(" + token.image + ")"); break;
                    case NUM:           System.out.print("NUM" + "(" + token.image + ")"); break;
                    case REAL:          System.out.print("REAL" + "(" + token.image + ")"); break;
                    case PLUS:
                    case MINUS:
                    case MULT:
                    case DIV:
                    case MOD:
                    case EQUALS:
                    case NOTEQUALS:
                    case LESSTHAN:
                    case GREATERTHAN:
                    case LESSOREQUAL:
                    case GREATOREQUAL:  System.out.print("OPERATOR" + "(" + token.image + ")"); break;
                    case LPAREN:
                    case RPAREN:
                    case LBRACE:
                    case RBRACE:
                    case COMMA:
                    case SEMICOLON:
                    case COLON:
                    case DOT:
                    case ASSIGN:
                    case QUESTIONMARK:
                    case EXCLAMATION:   System.out.print("RELATION" + "(" + token.image + ")"); break;
                    default:            System.out.println("\nOTHER" + "(" + token.image + ")"); 
                }
            }

        } catch(Exception e) {
            System.out.println("Failure in Main - " + e);
        }
    }
}
PARSER_END(LCompiler)

SKIP : {
          " "
        | "\t"
        | "\n"
        | "\r"
        | <"//" (<CHAR> | <DIGIT>)* ("\n" | "\r" | "\r\n") >}

TOKEN : {
    <KEYWORD :"and"
        | "bool"
        | "const"
        | "do"
        | "else"
        | "false"
        | "if"
        | "int"
        | "main"
        | "not"
        | "or"
        | "real"
        | "return"
        | "string"
        | "then"
        | "true"
        | "var"
        | "void"
        | "while" >}

TOKEN : {
    <#PUNCTUATION : "+"
        | "-"
        | "*"
        | "/"
        | "%"
        | "="
        | "!="
        | "<"
        | ">"
        | "<="
        | ">="
        | "("
        | ")"
        | "{"
        | "}"
        | ","
        | ";"
        | ":"
        | "."
        | ":="
        | "?"
        | "!" >}

TOKEN : {
      <PLUS : "+">
    | <MINUS : "-">
    | <MULT : "*">
    | <DIV : "/">
    | <MOD : "%">
    | <EQUALS : "=">
    | <NOTEQUALS : "!=">
    | <LESSTHAN : "<">
    | <GREATERTHAN : ">">
    | <LESSOREQUAL : "<=">
    | <GREATOREQUAL : ">=">
    | <LPAREN : "(">
    | <RPAREN : ")">
    | <LBRACE : "{">
    | <RBRACE : "}">
    | <COMMA : ",">
    | <SEMICOLON : ";">
    | <COLON : ":">
    | <DOT : ".">
    | <ASSIGN : ":=">
    | <QUESTIONMARK : "?">
    | <EXCLAMATION : "!" >}

TOKEN : {
    <#DIGIT : (["0" - "9"]) >}

TOKEN : {
    <NUM : ((<DIGIT>)+) >}

TOKEN : {
    <REAL : (<NUM> "." <NUM>) >}

TOKEN : {
    <#CHAR : (["a" - "z"])
        | (["A" - "Z"]) >}

TOKEN : {
    <#LETTERS : ((<CHAR>)+) >}

TOKEN : {
    <IDENITFIER : <CHAR>
        | <CHAR> (<LETTERS> | <NUM> | "_")+ >}

TOKEN : {
    <STRING : "\"" (<LETTERS> | <NUM> | <PUNCTUATION> | "_" | "\"" | "\n" | "\\")+ "\"" >}

TOKEN : {
    <#COMMENT : "/*" (<LETTERS> | <NUM> | <PUNCTUATION> | "_" | "\"" | "\n" | "\\" | "\t" | "/*" | "*/")+ "*/"
        | "--" (<LETTERS> | <NUM> | <PUNCTUATION> | "_" | "\"" | "\n" | "\\"| "\t")+ "\n" >}